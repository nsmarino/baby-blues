<!doctype html>
<html class="no-js" lang="{{ request.locale.iso_code }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="theme-color" content="">
    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon != blank -%}
      <link rel="icon" type="image/png" href="{{ settings.favicon | image_url: width: 32, height: 32 }}">
    {%- endif -%}

    {%- unless settings.type_header_font.system? and settings.type_body_font.system? -%}
      <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>
    {%- endunless -%}

    <title>
      {{ page_title }}
      {%- if current_tags %} &ndash; tagged "{{ current_tags | join: ', ' }}"{% endif -%}
      {%- if current_page != 1 %} &ndash; Page {{ current_page }}{% endif -%}
      {%- unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless -%}
    </title>

    {% if page_description %}
      <meta name="description" content="{{ page_description | escape }}">
    {% endif %}

    {% render 'meta-tags' %}

    <script src="{{ 'constants.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'pubsub.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'global.js' | asset_url }}" defer="defer"></script>
    {%- if settings.animations_reveal_on_scroll -%}
      <script src="{{ 'animations.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}

    {{ content_for_header }}

    {%- liquid
      assign body_font_bold = settings.type_body_font | font_modify: 'weight', 'bold'
      assign body_font_italic = settings.type_body_font | font_modify: 'style', 'italic'
      assign body_font_bold_italic = body_font_bold | font_modify: 'style', 'italic'
    %}

    {% style %}

      body {
        font-family: monospace;
        color: blue;
      }
      .asterisks-left, .asterisks-top, .asterisks-right, .asterisks-bottom  {
        opacity: 0;
        position: absolute;
      }

      .container {
        width: 420px;
        margin: 2rem auto;
        position: relative;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 40px;
      }
      .container-large {
        width: 800px;
      }
      .border-top::after, .border-bottom::after {
          content: "*";
          position: absolute;
          left: 2px;
          text-align: left;
          top: 0px;
          background: white;
          color: blue;
          z-index: 1;
          width: 2ch;
          font-weight: bold;
      }

      .border-top::before, .border-bottom::before {
          content: "*";
          position: absolute;
          right: 2px;
          top: 0px;
          background: white;
          color: blue;
          z-index: 1;
          width: 2ch;
          text-align: right;
          font-weight: bold;
      }



      h1 {
        text-align: center;
        font-family: Arial;
        font-weight: bold;
        text-transform: uppercase;
      }
      p {
        text-align: center;
      }

      .border-top {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        text-align: center;
          font-weight: bold;
      }

      .border-bottom {
        position: absolute;
        bottom: 2px;
        left: 0;
        right: 0;
        text-align: center;
          font-weight: bold;

      }
      .border-left {
        position: absolute;
        top: 0;
        left: 2px;
        bottom: 0;
        display: flex;
        flex-direction: column;
          font-weight: bold;

      }
      .border-right {
        position: absolute;
        top: 0;
        right: 2px;
        bottom: 0;
        display: flex;
        flex-direction: column;
        font-weight: bold;
      }
    {% endstyle %}

    {{ 'base.css' | asset_url | stylesheet_tag }}

    {%- unless settings.type_body_font.system? -%}
      <link rel="preload" as="font" href="{{ settings.type_body_font | font_url }}" type="font/woff2" crossorigin>
    {%- endunless -%}
    {%- unless settings.type_header_font.system? -%}
      <link rel="preload" as="font" href="{{ settings.type_header_font | font_url }}" type="font/woff2" crossorigin>
    {%- endunless -%}

    {%- if localization.available_countries.size > 1 or localization.available_languages.size > 1 -%}
      {{ 'component-localization-form.css' | asset_url | stylesheet_tag: preload: true }}
      <script src="{{ 'localization-form.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}

    {%- if settings.predictive_search_enabled -%}
      <link
        rel="stylesheet"
        href="{{ 'component-predictive-search.css' | asset_url }}"
        media="print"
        onload="this.media='all'"
      >
    {%- endif -%}

    <script>
      document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
      if (Shopify.designMode) {
        document.documentElement.classList.add('shopify-design-mode');
      }
    </script>
  </head>



  <body class="gradient{% if settings.animations_hover_elements != 'none' %} animate--hover-{{ settings.animations_hover_elements }}{% endif %}">
    <div class="container">
      <span class="asterisks-left asterisks-right asterisks-top asterisks-bottom">*&nbsp;</span>
      <h1>Baby Blues</h1>
      <p>all kinds of amazing and interesting foods. we have halibut, cod, salmon, swordfish, mackerel, tuna, squid, octopus, crab, lobster, shark, </p>
    </div>

    <br />

    {% comment %} <div class="container container-large">
      <span class="asterisks-top asterisks-bottom">*&nbsp;</span>
      <h1>1-800-SUCK-EGGS</h1>
      <p>Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us. Don't call us.</p>
    </div> {% endcomment %}

    <a class="skip-to-content-link button visually-hidden" href="#MainContent">
      {{ 'accessibility.skip_to_text' | t }}
    </a>

    {%- if settings.cart_type == 'drawer' -%}
      {%- render 'cart-drawer' -%}
    {%- endif -%}

    {% sections 'header-group' %}

    <main id="MainContent" class="content-for-layout focus-none" role="main" tabindex="-1">
      {{ content_for_layout }}
    </main>

    {% sections 'footer-group' %}

    <ul hidden>
      <li id="a11y-refresh-page-message">{{ 'accessibility.refresh_page' | t }}</li>
      <li id="a11y-new-window-message">{{ 'accessibility.link_messages.new_window' | t }}</li>
    </ul>

    <script>
      window.shopUrl = '{{ request.origin }}';
      window.routes = {
        cart_add_url: '{{ routes.cart_add_url }}',
        cart_change_url: '{{ routes.cart_change_url }}',
        cart_update_url: '{{ routes.cart_update_url }}',
        cart_url: '{{ routes.cart_url }}',
        predictive_search_url: '{{ routes.predictive_search_url }}',
      };

      window.cartStrings = {
        error: `{{ 'sections.cart.cart_error' | t }}`,
        quantityError: `{{ 'sections.cart.cart_quantity_error_html' | t: quantity: '[quantity]' }}`,
      };

      window.variantStrings = {
        addToCart: `{{ 'products.product.add_to_cart' | t }}`,
        soldOut: `{{ 'products.product.sold_out' | t }}`,
        unavailable: `{{ 'products.product.unavailable' | t }}`,
        unavailable_with_option: `{{ 'products.product.value_unavailable' | t: option_value: '[value]' }}`,
      };

      window.quickOrderListStrings = {
        itemsAdded: `{{ 'sections.quick_order_list.items_added.other' | t: quantity: '[quantity]' }}`,
        itemAdded: `{{ 'sections.quick_order_list.items_added.one' | t: quantity: '[quantity]' }}`,
        itemsRemoved: `{{ 'sections.quick_order_list.items_removed.other' | t: quantity: '[quantity]' }}`,
        itemRemoved: `{{ 'sections.quick_order_list.items_removed.one' | t: quantity: '[quantity]' }}`,
        viewCart: `{{- 'sections.quick_order_list.view_cart' | t -}}`,
        each: `{{- 'sections.quick_order_list.each' | t: money: '[money]' }}`,
      };

      window.accessibilityStrings = {
        imageAvailable: `{{ 'products.product.media.image_available' | t: index: '[index]' }}`,
        shareSuccess: `{{ 'general.share.success_message' | t }}`,
        pauseSlideshow: `{{ 'sections.slideshow.pause_slideshow' | t }}`,
        playSlideshow: `{{ 'sections.slideshow.play_slideshow' | t }}`,
        recipientFormExpanded: `{{ 'recipient.form.expanded' | t }}`,
        recipientFormCollapsed: `{{ 'recipient.form.collapsed' | t }}`,
        countrySelectorSearchCount: `{{ 'localization.country_results_count' | t: count: '[count]' }}`,
      };
    </script>
    <script>

const leftSeeds = document.querySelectorAll(".asterisks-left")
      const topSeeds = document.querySelectorAll(".asterisks-top")
      const rightSeeds = document.querySelectorAll(".asterisks-right")
      const bottomSeeds = document.querySelectorAll(".asterisks-bottom")

      topSeeds.forEach(seed => {
        const container = seed.parentElement
        const rowBorder = document.createElement("span")
        rowBorder.classList.add("border-top")
        const charactersNeededToFillRow = container.offsetWidth / seed.offsetWidth
        for (let i = 0; i < charactersNeededToFillRow; i++) {
          rowBorder.innerText += " *"
        }
        container.appendChild(rowBorder)
        console.log(container, rowBorder)
      })


      leftSeeds.forEach(seed => {
        
        const container = seed.parentElement
        const columnBorder = document.createElement("span")
        columnBorder.classList.add("border-left")
        const charactersNeededToFillColumn = container.offsetHeight / seed.offsetWidth
          for (let i = 0; i < charactersNeededToFillColumn - 1; i++) {
          columnBorder.innerHTML += "<span>*</span>"
        }
          container.appendChild(columnBorder)

      })


      bottomSeeds.forEach(seed => {
        const container = seed.parentElement
        const rowBorder = document.createElement("span")
        rowBorder.classList.add("border-bottom")
        const charactersNeededToFillRow = container.offsetWidth / seed.offsetWidth
        for (let i = 0; i < charactersNeededToFillRow; i++) {
          rowBorder.innerText += " *"
        }
        container.appendChild(rowBorder)
      })

      rightSeeds.forEach(seed => {
        const container = seed.parentElement
        const columnBorder = document.createElement("span")
        columnBorder.classList.add("border-right")
        const charactersNeededToFillColumn = container.offsetHeight / seed.offsetWidth
          for (let i = 0; i < charactersNeededToFillColumn; i++) {
          columnBorder.innerHTML += "<span>*</span>"
        }
          container.appendChild(columnBorder)
      })

    </script>

    {%- if settings.predictive_search_enabled -%}
      <script src="{{ 'predictive-search.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}
  </body>
</html>
